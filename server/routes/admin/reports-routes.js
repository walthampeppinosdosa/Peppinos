const express = require('express');
const router = express.Router();

// Import controllers
const {
  getReportAnalytics,
  getReportData,
  generateReport,
  getRecentReports,
  exportReportData
} = require('../../controllers/admin/reports-controller');

// Import middleware
const { authenticateToken, requireAdmin } = require('../../middleware/auth-middleware');
const { addRoleBasedFilter } = require('../../middleware/rbac-middleware');

// Apply authentication and admin authorization to all routes
router.use(authenticateToken);
router.use(requireAdmin);

/**
 * @route   GET /api/admin/reports/analytics
 * @desc    Get comprehensive report analytics with role-based filtering
 * @access  Admin (Super Admin, Veg Admin, Non-Veg Admin)
 * @query   {string} period - Time period (7d, 30d, 90d, 1y)
 * @query   {string} startDate - Custom start date (ISO string)
 * @query   {string} endDate - Custom end date (ISO string)
 * @query   {string} category - Category filter (all, veg, non-veg) - only for super-admin
 */
router.get('/analytics', addRoleBasedFilter, getReportAnalytics);

/**
 * @route   GET /api/admin/reports/data
 * @desc    Get report data for specific type with role-based filtering
 * @access  Admin (Super Admin, Veg Admin, Non-Veg Admin)
 * @query   {string} type - Report type (sales, orders, menu, customers)
 * @query   {string} period - Time period (7d, 30d, 90d, 1y)
 * @query   {string} startDate - Custom start date (ISO string)
 * @query   {string} endDate - Custom end date (ISO string)
 * @query   {string} category - Category filter (all, veg, non-veg) - only for super-admin
 * @query   {string} search - Search term
 * @query   {string} status - Status filter
 * @query   {number} page - Page number for pagination
 * @query   {number} limit - Items per page
 */
router.get('/data', addRoleBasedFilter, getReportData);

/**
 * @route   POST /api/admin/reports/generate
 * @desc    Generate and download report
 * @access  Admin (Super Admin, Veg Admin, Non-Veg Admin)
 * @body    {string} type - Report type (sales, orders, menu, customers, analytics)
 * @body    {string} format - Export format (pdf, excel, csv)
 * @body    {object} filters - Report filters
 * @body    {string} title - Custom report title
 */
router.post('/generate', addRoleBasedFilter, generateReport);

/**
 * @route   GET /api/admin/reports/recent
 * @desc    Get recent reports generated by the user
 * @access  Admin (Super Admin, Veg Admin, Non-Veg Admin)
 */
router.get('/recent', getRecentReports);

/**
 * @route   POST /api/admin/reports/export
 * @desc    Export report data (for frontend export functionality)
 * @access  Admin (Super Admin, Veg Admin, Non-Veg Admin)
 * @body    {array} data - Report data to export
 * @body    {string} type - Report type
 * @body    {string} format - Export format (pdf, excel, csv)
 * @body    {string} title - Report title
 * @body    {object} filters - Applied filters
 */
router.post('/export', exportReportData);

module.exports = router;
